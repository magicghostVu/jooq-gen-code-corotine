/*
 * This file is generated by jOOQ.
 */
package com.magicghostvu.model;


import com.magicghostvu.model.tables.Adminroles;
import com.magicghostvu.model.tables.Adminuser;
import com.magicghostvu.model.tables.Game;
import com.magicghostvu.model.tables.Gametag;
import com.magicghostvu.model.tables.Gameversion;
import com.magicghostvu.model.tables.User;
import com.magicghostvu.model.tables.records.AdminrolesRecord;
import com.magicghostvu.model.tables.records.AdminuserRecord;
import com.magicghostvu.model.tables.records.GameRecord;
import com.magicghostvu.model.tables.records.GametagRecord;
import com.magicghostvu.model.tables.records.GameversionRecord;
import com.magicghostvu.model.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AdminuserRecord> ADMINUSER_PKEY = Internal.createUniqueKey(Adminuser.ADMINUSER, DSL.name("AdminUser_pkey"), new TableField[] { Adminuser.ADMINUSER.DOMAINNAME }, true);
    public static final UniqueKey<GameRecord> GAME_PKEY = Internal.createUniqueKey(Game.GAME, DSL.name("Game_pkey"), new TableField[] { Game.GAME.ID }, true);
    public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, DSL.name("User_pkey"), new TableField[] { User.USER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AdminrolesRecord, AdminuserRecord> ADMINROLES__ADMINROLES_DOMAINNAME_FKEY = Internal.createForeignKey(Adminroles.ADMINROLES, DSL.name("AdminRoles_domainName_fkey"), new TableField[] { Adminroles.ADMINROLES.DOMAINNAME }, Keys.ADMINUSER_PKEY, new TableField[] { Adminuser.ADMINUSER.DOMAINNAME }, true);
    public static final ForeignKey<GameRecord, UserRecord> GAME__GAME_AUTHORID_FKEY = Internal.createForeignKey(Game.GAME, DSL.name("Game_authorId_fkey"), new TableField[] { Game.GAME.AUTHORID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<GameRecord, GameRecord> GAME__GAME_PARENTGAMEID_FKEY = Internal.createForeignKey(Game.GAME, DSL.name("Game_parentGameId_fkey"), new TableField[] { Game.GAME.PARENTGAMEID }, Keys.GAME_PKEY, new TableField[] { Game.GAME.ID }, true);
    public static final ForeignKey<GametagRecord, GameRecord> GAMETAG__GAMETAG_GAMEID_FKEY = Internal.createForeignKey(Gametag.GAMETAG, DSL.name("GameTag_gameId_fkey"), new TableField[] { Gametag.GAMETAG.GAMEID }, Keys.GAME_PKEY, new TableField[] { Game.GAME.ID }, true);
    public static final ForeignKey<GameversionRecord, GameRecord> GAMEVERSION__GAMEVERSION_GAMEID_FKEY = Internal.createForeignKey(Gameversion.GAMEVERSION, DSL.name("GameVersion_gameId_fkey"), new TableField[] { Gameversion.GAMEVERSION.GAMEID }, Keys.GAME_PKEY, new TableField[] { Game.GAME.ID }, true);
}
