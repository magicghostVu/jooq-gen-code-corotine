/*
 * This file is generated by jOOQ.
 */
package com.magicghostvu.model.tables.pojos;


import com.magicghostvu.model.enums.Gametype;

import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Game implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final Long createtime;
    private final String displayname;
    private final Long lastupdatetime;
    private final Long authorid;
    private final Gametype gametype;
    private final Long parentgameid;
    private final String description;

    public Game(Game value) {
        this.id = value.id;
        this.createtime = value.createtime;
        this.displayname = value.displayname;
        this.lastupdatetime = value.lastupdatetime;
        this.authorid = value.authorid;
        this.gametype = value.gametype;
        this.parentgameid = value.parentgameid;
        this.description = value.description;
    }

    public Game(
        Long id,
        Long createtime,
        String displayname,
        Long lastupdatetime,
        Long authorid,
        Gametype gametype,
        Long parentgameid,
        String description
    ) {
        this.id = id;
        this.createtime = createtime;
        this.displayname = displayname;
        this.lastupdatetime = lastupdatetime;
        this.authorid = authorid;
        this.gametype = gametype;
        this.parentgameid = parentgameid;
        this.description = description;
    }

    /**
     * Getter for <code>public.Game.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>public.Game.createTime</code>.
     */
    public Long getCreatetime() {
        return this.createtime;
    }

    /**
     * Getter for <code>public.Game.displayName</code>.
     */
    public String getDisplayname() {
        return this.displayname;
    }

    /**
     * Getter for <code>public.Game.lastUpdateTime</code>.
     */
    public Long getLastupdatetime() {
        return this.lastupdatetime;
    }

    /**
     * Getter for <code>public.Game.authorId</code>.
     */
    public Long getAuthorid() {
        return this.authorid;
    }

    /**
     * Getter for <code>public.Game.gameType</code>.
     */
    public Gametype getGametype() {
        return this.gametype;
    }

    /**
     * Getter for <code>public.Game.parentGameId</code>.
     */
    public Long getParentgameid() {
        return this.parentgameid;
    }

    /**
     * Getter for <code>public.Game.description</code>.
     */
    public String getDescription() {
        return this.description;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Game other = (Game) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.createtime == null) {
            if (other.createtime != null)
                return false;
        }
        else if (!this.createtime.equals(other.createtime))
            return false;
        if (this.displayname == null) {
            if (other.displayname != null)
                return false;
        }
        else if (!this.displayname.equals(other.displayname))
            return false;
        if (this.lastupdatetime == null) {
            if (other.lastupdatetime != null)
                return false;
        }
        else if (!this.lastupdatetime.equals(other.lastupdatetime))
            return false;
        if (this.authorid == null) {
            if (other.authorid != null)
                return false;
        }
        else if (!this.authorid.equals(other.authorid))
            return false;
        if (this.gametype == null) {
            if (other.gametype != null)
                return false;
        }
        else if (!this.gametype.equals(other.gametype))
            return false;
        if (this.parentgameid == null) {
            if (other.parentgameid != null)
                return false;
        }
        else if (!this.parentgameid.equals(other.parentgameid))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.createtime == null) ? 0 : this.createtime.hashCode());
        result = prime * result + ((this.displayname == null) ? 0 : this.displayname.hashCode());
        result = prime * result + ((this.lastupdatetime == null) ? 0 : this.lastupdatetime.hashCode());
        result = prime * result + ((this.authorid == null) ? 0 : this.authorid.hashCode());
        result = prime * result + ((this.gametype == null) ? 0 : this.gametype.hashCode());
        result = prime * result + ((this.parentgameid == null) ? 0 : this.parentgameid.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Game (");

        sb.append(id);
        sb.append(", ").append(createtime);
        sb.append(", ").append(displayname);
        sb.append(", ").append(lastupdatetime);
        sb.append(", ").append(authorid);
        sb.append(", ").append(gametype);
        sb.append(", ").append(parentgameid);
        sb.append(", ").append(description);

        sb.append(")");
        return sb.toString();
    }
}
