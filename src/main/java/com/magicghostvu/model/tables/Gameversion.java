/*
 * This file is generated by jOOQ.
 */
package com.magicghostvu.model.tables;


import com.magicghostvu.model.Indexes;
import com.magicghostvu.model.Keys;
import com.magicghostvu.model.Public;
import com.magicghostvu.model.enums.Gameversionstatus;
import com.magicghostvu.model.tables.records.GameversionRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Gameversion extends TableImpl<GameversionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.GameVersion</code>
     */
    public static final Gameversion GAMEVERSION = new Gameversion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameversionRecord> getRecordType() {
        return GameversionRecord.class;
    }

    /**
     * The column <code>public.GameVersion.id</code>.
     */
    public final TableField<GameversionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.GameVersion.gameId</code>.
     */
    public final TableField<GameversionRecord, Long> GAMEID = createField(DSL.name("gameId"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.GameVersion.status</code>.
     */
    public final TableField<GameversionRecord, Gameversionstatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'PUBLISHED'::\"GameVersionStatus\""), SQLDataType.VARCHAR)).asEnumDataType(com.magicghostvu.model.enums.Gameversionstatus.class), this, "");

    /**
     * The column <code>public.GameVersion.createdTime</code>.
     */
    public final TableField<GameversionRecord, Long> CREATEDTIME = createField(DSL.name("createdTime"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.GameVersion.unique</code>.
     */
    public final TableField<GameversionRecord, Long> UNIQUE = createField(DSL.name("unique"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('\"GameVersion_unique_seq\"'::regclass)"), SQLDataType.BIGINT)), this, "");

    private Gameversion(Name alias, Table<GameversionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Gameversion(Name alias, Table<GameversionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.GameVersion</code> table reference
     */
    public Gameversion(String alias) {
        this(DSL.name(alias), GAMEVERSION);
    }

    /**
     * Create an aliased <code>public.GameVersion</code> table reference
     */
    public Gameversion(Name alias) {
        this(alias, GAMEVERSION);
    }

    /**
     * Create a <code>public.GameVersion</code> table reference
     */
    public Gameversion() {
        this(DSL.name("GameVersion"), null);
    }

    public <O extends Record> Gameversion(Table<O> child, ForeignKey<O, GameversionRecord> key) {
        super(child, key, GAMEVERSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GAMEVERSION_GAMEID_ID_KEY, Indexes.GAMEVERSION_GAMEID_STATUS_CREATEDTIME_UNIQUE_IDX);
    }

    @Override
    public List<ForeignKey<GameversionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GAMEVERSION__GAMEVERSION_GAMEID_FKEY);
    }

    private transient Game _game;

    /**
     * Get the implicit join path to the <code>public.Game</code> table.
     */
    public Game game() {
        if (_game == null)
            _game = new Game(this, Keys.GAMEVERSION__GAMEVERSION_GAMEID_FKEY);

        return _game;
    }

    @Override
    public Gameversion as(String alias) {
        return new Gameversion(DSL.name(alias), this);
    }

    @Override
    public Gameversion as(Name alias) {
        return new Gameversion(alias, this);
    }

    @Override
    public Gameversion as(Table<?> alias) {
        return new Gameversion(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Gameversion rename(String name) {
        return new Gameversion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Gameversion rename(Name name) {
        return new Gameversion(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Gameversion rename(Table<?> name) {
        return new Gameversion(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Long, Gameversionstatus, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Long, ? super Gameversionstatus, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Long, ? super Gameversionstatus, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
